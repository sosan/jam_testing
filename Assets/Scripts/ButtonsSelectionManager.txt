using System.Collections;
using System.Collections.Generic;
using UnityEngine;
//using InControl;
using UnityEngine.UI;
using TMPro;



public class InfoJugador{
    public Color color;
    public int idDevice;
    public int x;
    }



public class ButtonsSelectionManager : MonoBehaviour
{

 

    [Header("Manager")]
    public MenuManager menuManager;
    public GameCharactersSettings gameCharactersSettings;
    public VariablesOverScenes variablesOverScenes;


    [Header("Characters Images")]
    public Image[] charactersImagesSmall;
    public Image[] charactersImagesBig;

    [Header("Barra HP")]
    public Image[] barraHP;

    [Header("Barra Power")]
    public Image[] barraPower;

    [Header("Barra Defensa")]
    public Image[] barraDefense;

    [Header("Nombre Personajes")]
    public TextMeshProUGUI[] nameCharactersPlayer;


    public TextMeshProUGUI[] explicacion;

    public Image[] mandosImage;
    public Sprite[] prefabMandosImage;



    //public TextMeshProUGUI[] textCharacters;

    private TwoAxisInputControl lstick = new TwoAxisInputControl();
    private TwoAxisInputControl rstick = new TwoAxisInputControl();
    private TwoAxisInputControl dpad = new TwoAxisInputControl();

    //private PlayerKeyboardActions keyboardListener;

    public Animation[] focusButtonX;
    //private Animation lastAnimation;

    public GameObject[] readyImage = null;

    public Color[] prefabColorsPlayers;
    public GameObject prefabPlayer;
    //public Text[] textPlayers;
    //public Text lastTextPlayer;

    public TextMeshProUGUI[] namePlayers = null;


    //private string[] namePlayers = new string[6];
    private InfoJugador[] jugadores = new InfoJugador[4];

    public TextMeshProUGUI timeTxt;
    public ushort timeNum = 60;

    public GameObject[] focusPlayers = null;
    public Image[] bigSelectionPlayers = null;
    public Image selectionAlAtaker = null;
    public Image[] playerInfoImage = null;

    public Sprite pairSprite = null;
    public Sprite noPairSprite = null;

    public GameObject[] initialPlayerPosition = null;
    //public System.Tuple<GameObject, GameObject> tupleGO = new System.Tuple<GameObject, GameObject>(null, null);
    //public Dictionary<InputDevice, GameObject> dicPlayers = new Dictionary<InputDevice, GameObject>();
    //public Dictionary<InputDevice, System.Tuple<GameObject, GameObject>>
    //    dicPlayers = new Dictionary<InputDevice, System.Tuple<GameObject, GameObject>>();

    public MatrixCharacters[] matrixCharacters = null;
    private MatrixCharacters playerKeyboardLastTaken = null;

    private void Awake()
    {

        lstick.StateThreshold = 0.1f; //0.5f
        rstick.StateThreshold = 0.1f;
        dpad.StateThreshold = 0.5f;

    }

    // Start is called before the first frame update
    void Start()
    {
        //lastTextPlayer = textPlayers[0];
        //for (ushort i = 0; i < textPlayers.Length; i++)
        //{

        //    textPlayers[i].text = "";

        //}

        for (ushort i = 0; i < readyImage.Length; i++)
        {

            readyImage[i].gameObject.SetActive(false);

        }


        //keyboardListener = PlayerKeyboardActions.CreateWithKeyboard();



        //textPlayers[0].text = "PJ 1";


        //fitting alpha image with collider. needs read/write enabled from texture
        for (ushort i = 0; i < charactersImagesSmall.Length; i++)
        {

            charactersImagesSmall[i].alphaHitTestMinimumThreshold = 1;

        }

    }


    public void IniciarCronoSeleccionPersonaje()
    {

        InvokeRepeating("DisplayCrono", 0, 1f);


    }


    private void DisplayCrono()
    {

        timeTxt.text = "TIME:" + timeNum;
        timeNum--;
        if (timeNum == 0)
        {

            CancelInvoke("DisplayCrono");
            alAtaque();

        }

    }


   




    public void AddPlayer(InputDevice inputDevice)
    {

        if (variablesOverScenes.dictPlayers.ContainsKey(inputDevice.GUID.ToString()) == false)
        {


            if (variablesOverScenes.dictPlayers.Count < VariablesOverScenes.MAX_PLAYERS)
            {

                ushort x = 0; ushort y = 0;
                switch (menuManager.countPlayers)
                {
                    case 0: x = 0; y = 2; break;
                    case 1: x = 5; y = 2; break;
                    case 2: x = 0; y = 0; break;
                    case 3: x = 5; y = 0; break;
                    default: Debug.LogError("demasiados"); break;

                }

                variablesOverScenes.dictPlayers.Add(inputDevice.GUID.ToString(),
                new InfoPlayer(
                    focusPlayers[menuManager.countPlayers],
                    null,
                    initialPlayerPosition[menuManager.countPlayers],
                    //initialPlayerPosition[menuManager.countPlayers].GetComponent<MatrixCharacters>(),
                    prefabColorsPlayers[menuManager.countPlayers],
                    x, y,
                    (ushort)(menuManager.countPlayers + 1),
                    true,
                    bigSelectionPlayers[menuManager.countPlayers],
                    false
                    

                ));


                menuManager.countPlayers++;
                menuManager.inputDevices.Add(inputDevice);

            }

        }

    }

    private void Update()
    {



        if (menuManager.pantallaElegirMando.activeSelf == false) return;
        if (InputManager.ActiveDevices.Count <= 0) return;



        var activeInputDevice = InputManager.ActiveDevice;
        //print("activeinputdevice" + activeInputDevice.Name + " " + activeInputDevice.GUID + 
        //    activeInputDevice.Meta.ToString()

        //    );





        //13985a89-c20d-4dfe-95fa-4d43b17b46b9

        //al ejecutar el programa, se crean nuevos guids, pero al conectar desconectar no.
        //c4e7f384-d42b-4ffe-bba3-2df5afeced42
        //c4e7f384-d42b-4ffe-bba3-2df5afeced42
        if (variablesOverScenes.dictPlayers.ContainsKey(activeInputDevice.GUID.ToString()) == false)
        {


            if (variablesOverScenes.dictPlayers.Count < VariablesOverScenes.MAX_PLAYERS)
            {


                //Adding Player
               // dictPlayers.Add(InputManager.Devices[i].GUID.ToString(),
               //new InfoPlayer(

               //    //InputManager.Devices[i],
               //    focusPlayers[i],
               //    initialPlayerPosition[i],
               //    initialPlayerPosition[i].GetComponent<MatrixCharacters>(),
               //    x, y,
               //    (ushort)(i + 1),
               //    true,
               //    bigSelectionPlayers[i],
               //    false

               //    )


               //);


            }
            else
            {

                //lleno


            }





        }


        InfoPlayer thisPlayer = variablesOverScenes.dictPlayers[activeInputDevice.GUID.ToString()];

        if (thisPlayer.playerId < 0 || thisPlayer.playerId > VariablesOverScenes.MAX_PLAYERS) return; //comprobaciones extra mas adelante

        


        if (activeInputDevice.Action1.WasPressed && thisPlayer.isFirstMove == false)
        {




            //el mando 0. corregir.
            //ufff puede petar? inputdevices[0] ???
            //if (menuManager.inputDevices[0].Action1.WasPressed && thisPlayer.selected == true)
            if (thisPlayer.playerId == 1 && thisPlayer.selected == true)
            {



                bool completado = true;
                List<string> keys = new List<string>(variablesOverScenes.dictPlayers.Keys);

                for (ushort i = 0; i < variablesOverScenes.dictPlayers.Count; i++)
                {


                    //CORREGIR....testesar
                    if (readyImage[i].activeSelf == false && variablesOverScenes.dictPlayers[keys[i]].isFirstMove == true)
                    {
                        completado = false;
                        return;
                    }

                }


                if (completado == true)
                {

                    alAtaque();

                }
                else
                {

                    return;
                }




            }
           
            readyImage[thisPlayer.playerId - 1].SetActive(
                !readyImage[thisPlayer.playerId - 1].activeSelf
            );

            thisPlayer.focusPlayer.GetComponent<Image>().enabled = false;

            thisPlayer.selected = !thisPlayer.selected;

            selectionAlAtaker.enabled = true;

            if (thisPlayer.playerId - 1 == 0)
            {

                explicacion[thisPlayer.playerId - 1].text = "PULSA B PARA DESMARCAR\nPULSA A PARA EMPEZAR";
            }
            else
            {

                explicacion[thisPlayer.playerId - 1].text = "PULSA B PARA DESMARCAR";

            }

            //print("selected=" + thisPlayer.selected);





        }


        if (activeInputDevice.Action2.WasPressed && thisPlayer.isFirstMove == false)
        {


            readyImage[thisPlayer.playerId - 1].SetActive(false);

            thisPlayer.selected = false;
            thisPlayer.focusPlayer.GetComponent<Image>().enabled = true;
            selectionAlAtaker.enabled = false;
            explicacion[thisPlayer.playerId - 1].text = "PULSA A PARA MARCAR";

            print("selected=" + thisPlayer.selected);





        }




        if (thisPlayer.selected == true) return;

        if (activeInputDevice.RightStick.WasPressed)
        {


            rstick.Filter(activeInputDevice.RightStick, Time.deltaTime);
            ControlWithStickRaw(thisPlayer, rstick);


            return;


        }

        if (activeInputDevice.DPad.WasPressed)
        {

            //print("dpad");

            dpad.Filter(activeInputDevice.Direction, Time.deltaTime);
            ControlWithDpadRaw(thisPlayer, dpad);

            return;

        }
        


        if(activeInputDevice.LeftStick.WasPressed)
        {


            //print("leftstick");

            lstick.Filter(activeInputDevice.LeftStick, Time.deltaTime);
            ControlWithStickRaw(thisPlayer, lstick);
            return;


        }


      


    }


    private void ControlWithStickRaw(InfoPlayer thisPlayer, TwoAxisInputControl stick)
    {

        //print("x=" + stick.Value.normalized.x + " Y=" + stick.Value.normalized.y);


        if (stick.Value.normalized.y >= 0.5f)
        {


            if (thisPlayer.isFirstMove == true)
            {
                return;

            }

            if ((thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().up is null) == false)
            {

                thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().up.down.taken = false;

            }

            MoveFocus(thisPlayer.focusPlayer, thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().up, thisPlayer.posX, thisPlayer.playerId - 1);
        }

        
        if (stick.Value.normalized.y <= -0.5f)
        {

            if (thisPlayer.isFirstMove == true)
            {
                return;

            }

            if ((thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().down is null) == false)
            {
                thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().down.up.taken = false;
            }


            MoveFocus(thisPlayer.focusPlayer, thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().down, thisPlayer.posX, thisPlayer.playerId - 1);

        }

        if (stick.Value.normalized.x >= 0.5f)
        {

            //print("derecha");

            if (thisPlayer.isFirstMove == true)
            {

                if (thisPlayer.playerId < 1 || thisPlayer.playerId > VariablesOverScenes.MAX_PLAYERS) return;

                //nopair, p1 o p3
                if (thisPlayer.playerId % 2 != 0)
                {
                    thisPlayer.isFirstMove = false;
                    thisPlayer.focusPlayer.GetComponent<Image>().enabled = true;
                    FirstUpdateUICharacters(thisPlayer.playerId - 1, thisPlayer.focusPlayer.GetComponent<MatrixCharacters>());


                }
                return;


            }


            if (thisPlayer.posX >= 0 && thisPlayer.posX < 5)
            {
                thisPlayer.posX++;
            }



            if ((thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().right is null) == false)
            {

                thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().right.left.taken = false;

            }

            MoveFocus(thisPlayer.focusPlayer, thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().right, thisPlayer.posX, thisPlayer.playerId -1);
        }

        if (stick.Value.normalized.x <= -0.5f)
        {



            if (thisPlayer.isFirstMove == true)
            {
                if (thisPlayer.playerId < 1 || thisPlayer.playerId > VariablesOverScenes.MAX_PLAYERS) return;

                //pair, p2 o p4
                if (thisPlayer.playerId % 2 == 0)
                {



                    thisPlayer.isFirstMove = false;
                    thisPlayer.focusPlayer.GetComponent<Image>().enabled = true;
                    FirstUpdateUICharacters(thisPlayer.playerId - 1, thisPlayer.focusPlayer.GetComponent<MatrixCharacters>());

                }
                return;


            }


            if (thisPlayer.posX > 0 && thisPlayer.posX <= 5)
            {
                thisPlayer.posX--;
            }


            if ((thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().left is null) == false)
            {
                thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().left.right.taken = false;

            }

            MoveFocus(thisPlayer.focusPlayer, thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().left, thisPlayer.posX, thisPlayer.playerId - 1);


        }


    }

    private void ControlWithDpadRaw(InfoPlayer thisPlayer, TwoAxisInputControl stick)
    {

        //print("x=" + stick.X + " Y=" + stick.Value.normalized.y);


        if (stick.Y == 1f)
        {

            if (thisPlayer.isFirstMove == true)
            {
                return;

            }

            if ((thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().up is null) == false)
            {

                thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().up.down.taken = false;

            }

            MoveFocus(thisPlayer.focusPlayer, thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().up, thisPlayer.posX, thisPlayer.playerId -1 );
            return;
        }


        if (stick.Y == -1f)
        {

            if (thisPlayer.isFirstMove == true)
            {
                return;

            }


            if ((thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().down is null) == false)
            {
                thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().down.up.taken = false;
            }


            MoveFocus(thisPlayer.focusPlayer, thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().down, thisPlayer.posX, thisPlayer.playerId - 1);
            return;
        }

        if (stick.X == 1f)
        {

            //print("derecha");

            if (thisPlayer.isFirstMove == true)
            {

                if (thisPlayer.playerId < 1 || thisPlayer.playerId > VariablesOverScenes.MAX_PLAYERS) return;
                //nopair, p1 o p3
                if (thisPlayer.playerId % 2 != 0)
                {
                    thisPlayer.isFirstMove = false;
                    thisPlayer.focusPlayer.GetComponent<Image>().enabled = true;

                    FirstUpdateUICharacters(thisPlayer.playerId - 1, thisPlayer.focusPlayer.GetComponent<MatrixCharacters>());


                }
                return;


            }



            if (thisPlayer.posX >= 0 && thisPlayer.posX < 5)
            {
                thisPlayer.posX++;
            }



            if ((thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().right is null) == false)
            {

                thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().right.left.taken = false;

            }

            MoveFocus(thisPlayer.focusPlayer, thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().right, thisPlayer.posX, thisPlayer.playerId -1 );
            return;
        }

        if (stick.X == -1f)
        {



            if (thisPlayer.isFirstMove == true)
            {

                if (thisPlayer.playerId < 1 || thisPlayer.playerId > VariablesOverScenes.MAX_PLAYERS) return;
                //pair, p2 o p4
                if (thisPlayer.playerId % 2 == 0)
                {
                    thisPlayer.isFirstMove = false;
                    thisPlayer.focusPlayer.GetComponent<Image>().enabled = true;

                    FirstUpdateUICharacters(thisPlayer.playerId - 1, thisPlayer.focusPlayer.GetComponent<MatrixCharacters>());


                }
                return;


            }


            if (thisPlayer.posX > 0 && thisPlayer.posX <= 5)
            {
                thisPlayer.posX--;
            }


            if ((thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().left is null) == false)
            {
                thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().left.right.taken = false;

            }

            MoveFocus(thisPlayer.focusPlayer, thisPlayer.focusPlayer.GetComponent<MatrixCharacters>().left, thisPlayer.posX, thisPlayer.playerId - 1);
            return;

        }


    }

    private void MoveFocus(GameObject focus, MatrixCharacters matrixPos, ushort posX, int playerId)
    {


        if ((matrixPos is null) == false)
        {


            if (playerId < 0 || playerId > VariablesOverScenes.MAX_PLAYERS - 1) return;


            if (posX % 2 == 0)
            {

                focus.GetComponent<Image>().sprite = pairSprite;
            }
            else
            {

                focus.GetComponent<Image>().sprite = noPairSprite;
            }


            focus.transform.position = matrixPos.gameObject.transform.position;
            matrixPos.taken = true;

            var tFocus = focus.GetComponent<MatrixCharacters>();

            tFocus.up = matrixPos.up;
            tFocus.down = matrixPos.down;
            tFocus.right = matrixPos.right;
            tFocus.left = matrixPos.left;


            tFocus.health = matrixPos.health;
            tFocus.healthMax = matrixPos.healthMax;
            tFocus.energy = matrixPos.energy;
            tFocus.energyMax = matrixPos.energyMax;
            tFocus.power = matrixPos.power;
            tFocus.powerMax = matrixPos.powerMax;
            tFocus.defense = matrixPos.defense;
            tFocus.defenseMax = matrixPos.defenseMax;
            tFocus.nameCharacter = matrixPos.nameCharacter;

            charactersImagesBig[playerId].sprite = matrixPos.imageCharacter;
            barraHP[playerId].fillAmount = matrixPos.health / matrixPos.healthMax;
            barraDefense[playerId].fillAmount = matrixPos.defense / matrixPos.defenseMax;
            barraPower[playerId].fillAmount = matrixPos.power / matrixPos.powerMax;
            nameCharactersPlayer[playerId].text = matrixPos.nameCharacter;






        }

       
        
    }

    private void FirstUpdateUICharacters(int playerId, MatrixCharacters matrixPlayer)
    {


        //{


        //    charactersImagesBig[playerId].sprite = initialPlayerPosition[playerId].GetComponent<MatrixCharacters>().imageCharacter;

        //    barraHP[playerId].fillAmount = initialPlayerPosition[playerId].GetComponent<MatrixCharacters>().health /
        //        initialPlayerPosition[playerId].GetComponent<MatrixCharacters>().healthMax;

        //    barraDefense[playerId].fillAmount = initialPlayerPosition[playerId].GetComponent<MatrixCharacters>().defense /
        //        initialPlayerPosition[playerId].GetComponent<MatrixCharacters>().defenseMax;

        //    barraPower[playerId].fillAmount = initialPlayerPosition[playerId].GetComponent<MatrixCharacters>().power /
        //        initialPlayerPosition[playerId].GetComponent<MatrixCharacters>().powerMax;
        //    nameCharactersPlayer[playerId].text = initialPlayerPosition[playerId].GetComponent<MatrixCharacters>().nameCharacter;



        //    matrixPlayer.health = initialPlayerPosition[playerId].GetComponent<MatrixCharacters>().health;
        //    matrixPlayer.healthMax = initialPlayerPosition[playerId].GetComponent<MatrixCharacters>().healthMax;
        //    matrixPlayer.energy = initialPlayerPosition[playerId].GetComponent<MatrixCharacters>().energy;
        //    matrixPlayer.energyMax = initialPlayerPosition[playerId].GetComponent<MatrixCharacters>().energyMax;
        //    matrixPlayer.power = initialPlayerPosition[playerId].GetComponent<MatrixCharacters>().power;
        //    matrixPlayer.powerMax = initialPlayerPosition[playerId].GetComponent<MatrixCharacters>().powerMax;
        //    matrixPlayer.defense = initialPlayerPosition[playerId].GetComponent<MatrixCharacters>().defense;
        //    matrixPlayer.defenseMax = initialPlayerPosition[playerId].GetComponent<MatrixCharacters>().defenseMax;
        //    matrixPlayer.nameCharacter = initialPlayerPosition[playerId].GetComponent<MatrixCharacters>().nameCharacter;



        //}

      
        {



            var tInitial = initialPlayerPosition[playerId].GetComponent<MatrixCharacters>();

            charactersImagesBig[playerId].sprite = tInitial.imageCharacter;

            barraHP[playerId].fillAmount = tInitial.health /
                tInitial.healthMax;

            barraDefense[playerId].fillAmount = tInitial.defense /
                tInitial.defenseMax;

            barraPower[playerId].fillAmount = tInitial.power /
                tInitial.powerMax;
            nameCharactersPlayer[playerId].text = tInitial.nameCharacter;



            matrixPlayer.health = tInitial.health;
            matrixPlayer.healthMax = tInitial.healthMax;
            matrixPlayer.energy = tInitial.energy;
            matrixPlayer.energyMax = tInitial.energyMax;
            matrixPlayer.power = tInitial.power;
            matrixPlayer.powerMax = tInitial.powerMax;
            matrixPlayer.defense = tInitial.defense;
            matrixPlayer.defenseMax = tInitial.defenseMax;
            matrixPlayer.nameCharacter = tInitial.nameCharacter;


        }



        mandosImage[playerId].sprite = prefabMandosImage[0];
        mandosImage[playerId].gameObject.SetActive(true);

        
        explicacion[playerId].text = "PULSA A PARA MARCAR";

        namePlayers[playerId].text = "P" + (playerId + 1);


    }

    public void alAtaque()
    {
        int id = 0;


        foreach (var playerInfo in variablesOverScenes.dictPlayers)
        {
            if (playerInfo.Key is null) continue;


            //jl.no es necesario.pero lo puse porque no sabia si se destruiria los valores de matrixcharacters al cambiar de escena.
            //{


            //    var t = playerInfo.Value.focusPlayer.GetComponent<MatrixCharacters>();

            //    playerInfo.Value.health = t.health;
            //    playerInfo.Value.healthMax = t.healthMax;
            //    playerInfo.Value.defense = t.defense;
            //    playerInfo.Value.defenseMax = t.defenseMax;
            //    playerInfo.Value.energy = t.energy;
            //    playerInfo.Value.energyMax = t.energyMax;
            //    playerInfo.Value.power = t.power;
            //    playerInfo.Value.powerMax = t.powerMax;
            //    playerInfo.Value.nameCharacter = t.nameCharacter;



            //}

            var newPlayer = GameObject.Instantiate(prefabPlayer, prefabPlayer.transform.position, Quaternion.identity);
            playerInfo.Value.playerGameObject = newPlayer;


            var itemHealth = newPlayer.GetComponent<Health>();
            var matrixPlayer = playerInfo.Value.focusPlayer.GetComponent<MatrixCharacters>();

            itemHealth.HP = matrixPlayer.health;
            itemHealth.maxHP = matrixPlayer.health;
            itemHealth.energy = matrixPlayer.energy;
            itemHealth.energyMax = matrixPlayer.energy;
            itemHealth.power = matrixPlayer.power;
            itemHealth.powerMax = matrixPlayer.power;
            itemHealth.defence = matrixPlayer.defense;
            itemHealth.defenceMax = matrixPlayer.defense;




            newPlayer.GetComponent<PlayerGravity>().playerColor = playerInfo.Value.colorPlayer;
            newPlayer.GetComponent<SpriteRenderer>().color = playerInfo.Value.colorPlayer;
            print("name=" + prefabPlayer.GetComponentsInChildren<SpriteRenderer>(true)[2].name);
            newPlayer.GetComponentsInChildren<SpriteRenderer>(true)[2].color = playerInfo.Value.colorPlayer;
            newPlayer.GetComponent<PlayerGravity>().gamepadPosition = id;
            newPlayer.SetActive(false);
            id++;

        }

        //foreach(InfoJugador infoJugador in jugadores)
        //{
        //    if (infoJugador != null)
        //    {
        //        var newPlayer = GameObject.Instantiate(prefabPlayer, prefabPlayer.transform.position, Quaternion.identity);
        //        newPlayer.GetComponent<PlayerGravity>().playerColor = prefabColorsPlayers[infoJugador.x];
        //        newPlayer.GetComponent<SpriteRenderer>().color = prefabColorsPlayers[infoJugador.x];
        //        print("name=" + prefabPlayer.GetComponentsInChildren<SpriteRenderer>(true)[2].name);
        //        newPlayer.GetComponentsInChildren<SpriteRenderer>(true)[2].color = prefabColorsPlayers[infoJugador.x];
        //        newPlayer.GetComponent<PlayerGravity>().gamepadPosition = id;

        //        //TODO añadir esto a dentro del script de las arenas
        //        //GameObject barraVida = GameObject.FindWithTag("Hud1");
        //        //newPlayer.GetComponent<Health>().healthBar = barraVida.GetComponent<Image>();

        //        //barraVida.GetComponent<Image>().fillAmount = 1;
        //        //newPlayer.GetComponent<Health>().maxHP = 200;

        //    }
        //    id++;
        //}
        menuManager.ClickPlay();

    }

    private void DisplayFX(ushort index)
    {

        //textPlayers[index].text = "TECLADO";
        focusButtonX[0].Play();

        /*
        prefabPlayer = GameObject.Instantiate(prefabPlayer, prefabPlayer.transform.position, Quaternion.identity);
        prefabPlayer.GetComponent<PlayerGravity>().playerColor = prefabColorsPlayers[index];
        prefabPlayer.GetComponent<SpriteRenderer>().color = prefabColorsPlayers[index];
        prefabPlayer.GetComponentsInChildren<SpriteRenderer>(true)[2].color = prefabColorsPlayers[counterX];*/


    }

    

    public void Personaje4()
    {
        DisplayFX(3);
        InfoJugador infoJugador = new InfoJugador();
        infoJugador.x = 3;
        jugadores[0] = infoJugador;

    }


    public void Personaje5()
    {
        DisplayFX(4);
        InfoJugador infoJugador = new InfoJugador();
        infoJugador.x = 4;
        jugadores[0] = infoJugador;
    }

    public void Personaje6()
    {

        DisplayFX(5);
        InfoJugador infoJugador = new InfoJugador();
        infoJugador.x = 5;
        jugadores[0] = infoJugador;
    }

    public void Personaje1()
    {
        print("personaje1");
        DisplayFX(0);
        InfoJugador infoJugador = new InfoJugador();
        infoJugador.x = 0;
        jugadores[0] = infoJugador;
    }

    public void Personaje2()
    {
        DisplayFX(1);

        InfoJugador infoJugador = new InfoJugador();
        infoJugador.x = 1;
        jugadores[0] = infoJugador;
    }

    public void Personaje3()
    {
        DisplayFX(2);
        InfoJugador infoJugador = new InfoJugador();
        infoJugador.x = 2;
        jugadores[0] = infoJugador;

    }


    public void ClickPersonajes(int i)
    {

        if (i == 0) return;
        //teclado

        if (menuManager.countPlayers >= VariablesOverScenes.MAX_PLAYERS)
        {
            print("no se admiten mas jugadores");
            return;
        }



        if (variablesOverScenes.dictPlayers.ContainsKey("teclado") == true)
        {

            print("encontrado");
            //cambiar de personaje
            playerKeyboardLastTaken.taken = false;
        }
        else
        {

            print("no encontrado");


            ushort x = 0; ushort y = 0;
            switch (menuManager.countPlayers)
            {
                case 0: x = 0; y = 2; break;
                case 1: x = 5; y = 2;  break;
                case 2: x = 0; y = 0;  break;
                case 3: x = 5; y = 0;  break;
                default: Debug.LogError("demasiados"); break;

            }



            //añadir personaje y cambiar de personaje
            variablesOverScenes.dictPlayers.Add("teclado",
           new InfoPlayer(

               //tInput,
               focusPlayers[menuManager.countPlayers],
               null,
               initialPlayerPosition[menuManager.countPlayers],
               //initialPlayerPosition[menuManager.countPlayers].GetComponent<MatrixCharacters>(),
               prefabColorsPlayers[menuManager.countPlayers],
               x, y,
               (ushort)(menuManager.countPlayers + 1),
               true,
               bigSelectionPlayers[menuManager.countPlayers],
               false
               

               )


           );




            menuManager.countPlayers++;

        }



        InfoPlayer thisPlayer = variablesOverScenes.dictPlayers["teclado"];



        i--;
        var tID = thisPlayer.playerId--;

        thisPlayer.selected = true;
        readyImage[tID].SetActive(true);

        thisPlayer.focusPlayer.transform.position = matrixCharacters[i].gameObject.transform.position;

        thisPlayer.namePlayer = gameCharactersSettings.nameCharacters[i];

        if ((i)% 2 == 0)
        {

            thisPlayer.focusPlayer.GetComponent<Image>().sprite = pairSprite;
        }
        else
        {

            thisPlayer.focusPlayer.GetComponent<Image>().sprite = noPairSprite;
        }

        thisPlayer.focusPlayer.GetComponent<Image>().enabled = true;

        var mPlayer = thisPlayer.focusPlayer.GetComponent<MatrixCharacters>();

        mPlayer = matrixCharacters[i];

        print("health teclado=" + mPlayer.health);

        matrixCharacters[i].taken = true;
        playerKeyboardLastTaken = matrixCharacters[i];


        charactersImagesBig[tID].sprite = matrixCharacters[i].imageCharacter;
        barraHP[tID].fillAmount = matrixCharacters[i].health / matrixCharacters[i].healthMax;
        barraDefense[tID].fillAmount = matrixCharacters[i].defense / matrixCharacters[i].defenseMax;
        barraPower[tID].fillAmount = matrixCharacters[i].power / matrixCharacters[i].powerMax;
        nameCharactersPlayer[tID].text = matrixCharacters[i].nameCharacter;


        mandosImage[tID].sprite = prefabMandosImage[1];

        mandosImage[tID].gameObject.SetActive(true);







    }





}